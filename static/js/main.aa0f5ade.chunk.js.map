{"version":3,"sources":["Components/Helpers/Field.jsx","Components/Helpers/TextArea.jsx","Components/NoteDisplay.jsx","Components/Helpers/Button.jsx","Components/MarkdownInput.jsx","Components/Note.jsx","Components/NotesViewver.jsx","App.jsx","index.jsx"],"names":["Field","name","value","onChange","className","classNameParent","type","id","autoComplete","TextArea","NoteDisplay","title","content","contentDisplay","Showdown","Converter","makeHtml","dangerouslySetInnerHTML","__html","Button","onClick","MarkdownInput","handleSave","currentNote","useState","setTitle","setContent","useEffect","e","target","Note","index","handleDel","hundleCurrentNote","onDoubleClick","NotesViewver","notes","length","map","App","setNotes","setCurrentNote","storedValues","localStorage","getItem","JSON","parse","splice","setItem","stringify","newCurrentNote","filter","note","indexOf","save","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa0f5ade.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\n\nconst Field = ({\n  name, value, onChange, className, classNameParent,\n}) => (\n  <div className={classNameParent}>\n    <input type=\"text\" value={value} onChange={onChange} id={name} name={name} className={className} autoComplete=\"off\" />\n  </div>\n);\n\nexport default Field;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nconst TextArea = ({\n  name, value, onChange, className,\n}) => (\n  <div>\n    <textarea value={value} onChange={onChange} id={name} name={name} className={className} />\n  </div>\n);\n\nexport default TextArea;\n","/* eslint-disable react/no-danger */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Showdown from 'showdown';\n\n// eslint-disable-next-line react/prop-types\nconst NoteDisplay = ({ title, content }) => {\n  const converter = new Showdown.Converter();\n  \n  const contentDisplay = converter.makeHtml(content);\n  const createMarkup = () => ({ __html: contentDisplay });\n  return (\n    <div className=\"right-top\">\n      <h1>{title}</h1>\n      <div dangerouslySetInnerHTML={createMarkup()} />\n    </div>\n  );\n};\n\nexport default NoteDisplay;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nconst Button = ({ \n  content, className, onClick,\n}) => (\n  <button type=\"button\" className={className} onClick={onClick}>{content}</button>\n);\n\nexport default Button;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport Field from './Helpers/Field';\nimport TextArea from './Helpers/TextArea';\nimport NoteDisplay from './NoteDisplay';\nimport Button from './Helpers/Button';\n\nconst MarkdownInput = ({ handleSave, currentNote }) => {\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n\n  const handleClick = () => {\n    const note = { title, content };\n    handleSave(note);\n    setTitle('');\n    setContent('');\n  };\n  \n  useEffect(() => {\n    if (currentNote) {\n      setTitle(currentNote[0].title);\n      setContent(currentNote[0].content);\n    }\n  }, [currentNote]);\n\n  return (\n    <>\n      <NoteDisplay title={title} content={content} />\n      <div>\n        <Field name=\"title\" value={title} onChange={(e) => setTitle(e.target.value)} type=\"text\" className=\"bg-gray\" classNameParent=\"\" />\n        <TextArea name=\"content\" value={content} onChange={(e) => setContent(e.target.value)} className=\"bg-gray\" />\n        <Button content=\"Sauvegarder\" className=\"btn\" onClick={handleClick} />\n      </div>\n    </>\n  );\n};\n\nexport default MarkdownInput;\n","/* eslint-disable no-undef */\n/* eslint-disable react/prop-types */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\n\nconst Note = ({\n  title, content, index, handleDel, hundleCurrentNote,\n}) => (\n  <div className=\"note\" onDoubleClick={() => handleDel(index)} onClick={() => hundleCurrentNote(index)}>\n    <h1>{title}</h1>\n    <p>{content}</p>\n  </div>\n);\n\nexport default Note;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-duplicate-props */\n/* eslint-disable max-len */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Button from './Helpers/Button';\nimport Note from './Note';\n\nconst NotesViewver = ({ notes, handleDel, hundleCurrentNote }) => (\n  <div>\n    <Button content=\"Ajouter une note\" className=\"btn\" />\n    {notes && notes.length > 0 && notes.map(({ \n      title, content,\n    }, index) => <Note title={title} content={content} key={index} handleDel={handleDel} index={index} hundleCurrentNote={hundleCurrentNote} />)}\n  </div>\n);\n\nexport default NotesViewver;\n","/* eslint-disable no-shadow */\n/* eslint-disable no-unused-expressions */\nimport React, { useState, useEffect } from 'react';\nimport MarkdownInput from './Components/MarkdownInput';\nimport NotesViewver from './Components/NotesViewver';\nimport './Sass/App.scss';\n\nconst App = () => {\n  \n  const [notes, setNotes] = useState([]);\n  const [currentNote, setCurrentNote] = useState();\n  \n  const handleSave = (note) => {\n    let save = [];\n    notes ? save = [...notes, note] : save = [note];\n    setNotes(save);\n    localStorage.setItem('notes', JSON.stringify(save));\n  };\n  \n  const handleDel = (index) => {\n    let storedValues = localStorage.getItem('notes');\n    storedValues = JSON.parse(storedValues);\n    storedValues.splice(index, 1);\n    setNotes(storedValues);\n    const resetValues = [{ title: ' ', content: ' ' }]; \n    setCurrentNote(resetValues);\n    localStorage.setItem('notes', JSON.stringify(storedValues));\n  };\n\n  const hundleCurrentNote = (index) => {\n    let storedValues = localStorage.getItem('notes');\n    storedValues = JSON.parse(storedValues);\n    const newCurrentNote = storedValues.filter((note) => storedValues.indexOf(note) === index);\n    setCurrentNote(newCurrentNote);\n  };\n\n  useEffect(() => {\n    let storedValues = localStorage.getItem('notes');\n    storedValues = JSON.parse(storedValues);\n    setNotes(storedValues);\n  }, [setNotes]);\n  \n  return (\n    <div className=\"App\">\n      <div className=\"left\">\n        <NotesViewver notes={notes} handleDel={handleDel} hundleCurrentNote={hundleCurrentNote} />\n      </div>\n      <div className=\"right\">\n        <MarkdownInput handleSave={handleSave} currentNote={currentNote} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Sass/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}